
set nocompatible              " be iMproved

" Vundle {{{
filetype off                  " required!

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#rc()

" let Vundle manage Vundle
" required! 
Bundle 'gmarik/vundle'

" My bundles here:
"
Bundle 'xoria256.vim'
Bundle 'Markdown'
Bundle 'bufkill.vim'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-fugitive'
Bundle 'airblade/vim-gitgutter'
Bundle 'L9'
Bundle 'FuzzyFinder'
Bundle 'kchmck/vim-coffee-script'
Bundle 'tComment'
Bundle 'YankRing.vim'
Bundle 'fatih/vim-go'

filetype plugin indent on     " required!

" }}}


" Configurations that follow are based on http://nvie.com/posts/how-i-boosted-my-vim/

" change the mapleader from \ to ,
let mapleader=","

" Quickly edit/reload vimrc file
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

" VIM behavior {{{
set hidden                              " allow to switch buffer with unwritten changes
set nowrap                              " don't wrap lines
set tabstop=4                           " a tab is 4 spaces
set expandtab 							" use spaces instead of tabs
set backspace=indent,eol,start          " allow backspacing over everything in insert mode
set autoindent                          " always set autoindenting to on
set copyindent                          " copy the previous indentation on autoindentin
set shiftwidth=4                        " number of spaces to use for autoindenting
set shiftround                          " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch                           " set show matching parenthesis
set ignorecase                          " ignore case when searching
set smartcase                           " ignore case if search pattern is all lowercase, case-sensitive otherwise
set smarttab                            " insert tabs on the start of a line according to shiftwidth not tabstop
set hlsearch                            " highlight search terms
set incsearch                           " show search matches as you type
set history=1000                        " remember more commands and search history
set undolevels=1000                     " use many muchos levels of undo
set wildignore=*.swp,*.bak,*.pyc,*.class
set title                               " change the terminal's title
set visualbell                          " don't beep
set noerrorbells                        " don't beep
set nobackup
set noswapfile
syntax on
"set list                                        " highlight whitespaces
set listchars=tab:▸\ ,trail:·,extends:#,nbsp:·  " highlight whitespaces
set wildmenu                            " show command completion matches highlights
"set virtualedit=all                     " allow the cursor to go in to "invalid" places
set clipboard=unnamedplus               " alias unnamed register to the + register, which is the X Window clipboard
set cpoptions+=$                        " show dollar sign when changing

" disable arrow keys to force using VIM keys
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" exit Edit mode with jj
imap jj <ESC>

" easy window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" clear search buffer by pressing ,/
nmap <silent> ,/ :nohlsearch<CR>

" toggle show/hide invisible chars
nnoremap <leader>i :set list!<CR>

" toggle line numbers
nnoremap <leader>N :setlocal number!<CR>

" }}}

" Color Scheme {{{
" -- Solarized --
" From https://github.com/altercation/vim-colors-solarized
" let g:solarized_termcolors=256
" let g:solarized_termtrans=1
" syntax enable
" set background=dark
" colorscheme solarized
" -- Xoria256 --
syntax on
set t_Co=256
colorscheme xoria256
" }}}

" Airline {{{
set laststatus=2
" }}}

" vim-gitgutter {{{
highlight clear SignColumn
" }}}

" tComment {{{
map <leader>c <c-_><c-_>
" }}}

" Custom buffer selection function from http://djcraven5.blogspot.fr/2006/10/faster-buffer-switches-in-vim_21.html
function! BufSel(pattern)
    let buflist = []
    let bufcount = bufnr("$")
    let currbufnr = 1

    while currbufnr <= bufcount
        if(buflisted(currbufnr))
            let currbufname = bufname(currbufnr)
            if (exists("g:BufSel_Case_Sensitive") == 0 || g:BufSel_Case_Sensitive == 0)
                let curmatch = tolower(currbufname)
                let patmatch = tolower(a:pattern)
            else
                let curmatch = currbufname
                let patmatch = a:pattern
            endif
            if(match(curmatch, patmatch) > -1)
                call add(buflist, currbufnr)
            endif
        endif
        let currbufnr = currbufnr + 1
    endwhile
    if(len(buflist) > 1)
        for bufnum in buflist
            echo bufnum . ":      ". bufname(bufnum)
        endfor
        let desiredbufnr = input("Enter buffer number: ")
        if(strlen(desiredbufnr) != 0)
            exe ":bu ". desiredbufnr
        endif
    elseif (len(buflist) == 1)
        exe ":bu " . get(buflist,0)
    else
        echo "No matching buffers"
    endif
endfunction
command! -nargs=1 -complete=buffer Bs :call BufSel("<args>")
cabbr b Bs
